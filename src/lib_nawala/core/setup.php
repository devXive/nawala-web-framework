<?php
/**
 * @package          Nawala Rapid Development Kit
 * @subPackage	Nawala - Library
 * @author           devXive - research and development <support@devxive.com> (http://www.devxive.com)
 * @copyright        Copyright (C) 1997 - 2013 devXive - research and development. All rights reserved.
 * @license          GNU General Public License version 2 or later; see LICENSE.txt
 * @assetsLicense    devXive Proprietary Use License (http://www.devxive.com/license)
 */

// Check to ensure this file is included in Nawala!RDK environment
defined('_NRDKRA') or die;

/**
 * Nawala Framework CoreSetup Class
 *
 * Class that buil and push all informations we need in all nawala environments
 *
 * @package       Framework
 * @subpackage    Core
 * @since         1.0
 */
class NCoreSetup
{
	/**
	 * @var    string    $basePath    System base website path
	 * @var    string    $baseUrl     Url base website path
	 */
	static $basePath;
	static $baseUrl;

	/**
	 * @var    string    $templateName      Name of the active template
	 * @var    string    $templatePath      Path of the active template
	 * @var    string    $templateUrl       Url of the active template
	 * @var    string    $templatePrefix    Autogenerated template prefix of the active template
	 */
	static $templateName;
	static $templatePath;
	static $templateUrl;
	static $templatePrefix;

	/**
	 * @var    string    $basePath    System path to nawala library
	 * @var    string    $baseUrl     Url path to nawala library
	 */
	static $nawalaPath;
	static $nawalaUrl;

	/**
	 * Path for the compressed / combined files, which will be used later to load files from
	 *
	 * @var    string    $cachePath    System path to nawala cache dir
	 * @var    string    $cacheUrl     Url path to nawala cache dir
	 */
	static $cachePath;
	static $cacheUrl;

	/**
	 * @var    object    $platform    Static Nawala platform informations
	 */
	static $platform;


	/**
	 * Constructor
	 * Note that static vars can not be override!
	 */
	public function __construct( array $data = array() )
	{
		// Init global
		global $nawala;

		// Initialize Setup
		$this->init();

		// Set optionals
		$this->set( $data );

		// Init the nawala session object
		new NSession;
	}


	public function init()
	{
		// Init global
		global $nawala;

		$doc = JFactory::getDocument();
		$app = JFactory::getApplication();
		$nawalaApp = NCoreUpdates::getInstance();

		$this->basePath = JPATH_ROOT;
		$this->baseUrl  = JURI::base(true);
		$this->baseHttp = substr(JURI::base(), 0, -1); // Strip last char (trailing slash /)

		$this->templateName   = $app->getTemplate();
		$this->templatePath   = $this->basePath . '/templates/' . $this->templateName;
		$this->templateUrl    = $this->baseUrl . '/templates/' . $this->templateName;
		$this->templatePrefix = $this->templateName . '-';

		$this->nawalaPath = $this->basePath . '/libraries/nawala';
		$this->nawalaUrl  = $this->baseUrl . '/libraries/nawala';

		$this->cachePath = $this->basePath . '/cache/nawala';
		$this->cacheUrl  = $this->baseUrl . '/cache/nawala';

		// Declare the main Entry Points to look for
		$this->stylePaths = array(
			$this->templatePath . '/less',
			$this->templatePath . '/css',
			$this->templatePath . '/js',
			$this->nawalaPath . '/assets/less',
			$this->nawalaPath . '/assets/css',
			$this->nawalaPath . '/assets/js'
		);


		/**
		 * Nawala Platform Object
		 */
		$nawalaLibrary = new JObject;
		$nawalaLibrary->set('name', 'nawala');
		$nawalaLibrary->set('version', $nawalaApp->getCurrentVersion() );
		$nawalaLibrary->set('basePath', $this->basePath . '/libraries/nawala');
		$nawalaLibrary->set('baseUrl', $this->baseUrl . '/libraries/nawala');

		$this->platform = $nawalaLibrary;

		/**
		 * Applications Object
		 */
		$nawalaDocument = new JObject;
		$nawalaDocument->set('session.token', JFactory::getSession()->get('session.token'));

		$this->nawalaDocument = $nawalaDocument;

		/**
		 * aggregated informations
		 */
//		$this->nawalaApplication =& $nawalaApp;
//		$this->application =& $app;
//		$this->document =& $doc;
	}


	/**
	 * Method to set vars
	 */
	public function set(  $string = false, $value = false )
	{
		// Init global
		global $nawala;

		if ( $string && $value ) {
			$this->$string = $value;
		}
	}


	/**
	 * Register Session Object. Load only if it yet not exist or if setup object has been updated
	 *
	 * @var    boolean    $debug    Draw a message if the session has been updated or not
	 */
	public function registerSession( $debug = false )
	{
		// Init global
		global $nawala;

		$currentSessionScope = array();
		$currentSessionScope['md5'] = md5( serialize($nawala) );
		$currentSessionScope['now'] = time();

		$lastSessionScope = NSession::get('sessionScope');

		// Check existing session
		if ( NSession::exist() ) {
			// Check for lastSessionScope
			if ( !isset($lastSessionScope['md5']) || ($lastSessionScope['md5'] != $currentSessionScope['md5']) ) {
				$sessionScope = array();
				$sessionScope['md5'] = $currentSessionScope['md5'];
				$sessionScope['updated'] = $currentSessionScope['now'];

				NSession::set('sessionScope', $sessionScope);
				NSession::set('scope', $nawala);

				if ( $debug ) {
					JFactory::getApplication()->enqueueMessage(JText::_('LIB_NAWALA_CORE_SETUP_SESSION_UPDATED_SUCCESSFULL'), 'notice');
				}
			} else {
				if ( $debug ) {
					JFactory::getApplication()->enqueueMessage(JText::_('LIB_NAWALA_CORE_SETUP_SESSION_NO_UPDATE_NEEDED'), 'success');
				}
			}
		}
	}
}